apiVersion: v1
data:
  .env: |-
    MYSQL_HOST=mysql-payment
    MYSQL_PORT=3306
    MYSQL_DATABASE=payments
    MYSQL_USER=admin
    MYSQL_PASSWORD=password
    AWS_REGION=ap-southeast-1
    AWS_ACCESS_KEY=AKIAU7FBPIAHITTHGZA7
    AWS_SECRET_KEY=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
    S3_BUCKET_NAME=ido-eshop-payments
    CLOUDFRONT_DOMAIN=https://dpn2fs8em7hu0.cloudfront.net
    AUTH_BASE_URL=http://eshop-auth:2003
    KAFKA_BOOTSTRAP_SERVERS=kafka1:29092
  .env.example: |-
    MYSQL_HOST=
    MYSQL_PORT=
    MYSQL_DATABASE=
    MYSQL_USER=
    MYSQL_PASSWORD=
    AWS_REGION=a
    AWS_ACCESS_KEY=
    AWS_SECRET_KEY=
    S3_BUCKET_NAME=
    CLOUDFRONT_DOMAIN=
    AUTH_BASE_URL=
    KAFKA_BOOTSTRAP_SERVERS=
  .gitignore: |-
    target/
    !.mvn/wrapper/maven-wrapper.jar
    !**/src/main/**/target/
    !**/src/test/**/target/

    ### IntelliJ IDEA ###
    .idea/modules.xml
    .idea/jarRepositories.xml
    .idea/compiler.xml
    .idea/libraries/
    *.iws
    *.iml
    *.ipr

    ### Eclipse ###
    .apt_generated
    .classpath
    .factorypath
    .project
    .settings
    .springBeans
    .sts4-cache

    ### NetBeans ###
    /nbproject/private/
    /nbbuild/
    /dist/
    /nbdist/
    /.nb-gradle/
    build/
    !**/src/main/**/build/
    !**/src/test/**/build/

    ### VS Code ###
    .vscode/

    ### Mac OS ###
    .DS_Store

    ### env file ###
    .env
  Dockerfile: |-
    # Step 1: Build stage
    FROM maven:3.9.6-eclipse-temurin-21-jammy AS build
    WORKDIR /app

    COPY pom.xml .
    RUN mvn dependency:go-offline -B
    COPY src ./src
    RUN mvn clean package -DskipTests -B

    # Step 2: Production stage
    FROM eclipse-temurin:21-jre-jammy as production
    RUN groupadd -r appgroup && useradd -r -g appgroup appuser
    WORKDIR /app
    COPY --from=build /app/target/*.jar app.jar

    RUN chown -R appuser:appgroup /app
    USER appuser

    EXPOSE 2006

    ENTRYPOINT ["java", \
        "-XX:+UseContainerSupport", \
        "-XX:MaxRAMPercentage=75.0", \
        "-Djava.security.egd=file:/dev/./urandom", \
        "-jar", "app.jar" \
    ]
  Dockerfile.dev: |-
    FROM maven:3.9.6-eclipse-temurin-21-jammy as build

    WORKDIR /app

    # for dependency resolution
    COPY pom.xml .

    # dependencies
    RUN mvn dependency:go-offline -B

    # copy source code
    COPY src ./src

    # development stage -> spring boot devtools
    FROM build as dev
    EXPOSE 2006
    CMD ["mvn", "spring-boot:run", "-Dspring-boot.run.jvmArguments='-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005'"]
  README.md: |
    # Payment Service
    Payment service for E-Shop application. This service handles payment processing and management.

    ## Table of Contents
    - Technology Stack
    - Project Structure
    - Getting Started
        - Prerequisites
        - Environment Variables
        - Running Application

    ### Tech Stack
    - Java 21
    - Springboot 3.2.1
    - MySQL
    - AWS S3
    - AWS Cognito
    - Apache Kafka
    - Maven

    ### Project Structure
    ```
    src/main/java/com/github/eshop/payment/
    ├── domain/                    # Business Rules
    │   ├── entity/                # Business objects or models
    │   │   ├── Payment.java
    │   │   └── PaymentStatus.java
    │   ├── repository/            # Repository interfaces
    │   │   └── PaymentRepository.java
    │   └── service/               # Domain logic
    │       └── PaymentService.java
    │
    ├── application/               # Application Business Rules
    │   ├── dto/                   # Data Transfer Objects
    │   │   ├── CreatePaymentRequest.java
    │   │   └── PaymentResponse.java
    │   ├── service/               # Use cases
    │   │   └── PaymentApplicationService.java
    │   └── exception/             # Application specific exceptions
    │       └── PaymentException.java
    │
    ├── infrastructure/            # Frameworks & Drivers
    │   ├── config/                # Framework configurations
    │   │   ├── S3Config.java
    │   │   └── SecurityConfig.java
    │   ├── persistence/           # Database implementations
    │   │   ├── entity/
    │   │   │   └── PaymentEntity.java
    │   │   ├── repository/
    │   │   │   └── JpaPaymentRepository.java
    │   │   └── adapter/
    │   │       └── PaymentRepositoryAdapter.java
    │   ├── security/             # Security implementations
    │   │   └── AuthenticationFilter.java
    │   └── s3/                   # External service implementations
    │       └── S3Service.java
    │
    └── controller/               # Controller Adapters
        ├── rest/                 # REST controllers
        │   ├── PaymentController.java
        │   └── GlobalExceptionHandler.java
        └── event/               # Event listeners
            └── PaymentKafkaListener.java
    ```

    ### Getting Started
    #### Prerequisites
    - Java 21
    - Docker and Docker Compose
    - AWS Account with S3 and Cognito Access
    - MySQL

    #### Environment Variables (value just for an example)
    ```
    MYSQL_HOST=mysql-payment
    MYSQL_PORT=3306
    MYSQL_DATABASE=payments
    MYSQL_USER=admin
    MYSQL_PASSWORD=password
    AWS_REGION=ap-southeast-x
    AWS_ACCESS_KEY=AWSEXAMPLEACCESSKEY
    AWS_SECRET_KEY=AwseXAMPLEsecRETk3Y
    S3_BUCKET_NAME=awsexamples3bucketname
    CLOUDFRONT_DOMAIN=https://cloudfrontexample.cloudfront.net

    ```
    #### Running Application
    Run with docker compose in root folder (same level with `\src`)
    ```
    docker compose up -d
    ```
  pom.xml: |
    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
      <modelVersion>4.0.0</modelVersion>

      <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.1</version>
        <relativePath/>
      </parent>

      <groupId>com.github.eshop.payment</groupId>
      <artifactId>eshop-payment</artifactId>
      <version>1.0-SNAPSHOT</version>
      <name>eshop-payment</name>

      <properties>
        <java.version>21</java.version>
        <parent.version>3.2.1</parent.version>
        <spring.kafka.version>3.3.1</spring.kafka.version>
        <mysql.connector.version>9.1.0</mysql.connector.version>
        <aws.sdk.version>2.29.39</aws.sdk.version>
        <lombok.version>1.18.36</lombok.version>
        <jakarta.validation.version>3.0.2</jakarta.validation.version>
        <junit.version>4.13.2</junit.version>
      </properties>

      <dependencies>
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-web</artifactId>
          <version>${parent.version}</version>
        </dependency>
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-data-jpa</artifactId>
          <version>${parent.version}</version>
        </dependency>
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-security</artifactId>
          <version>${parent.version}</version>
        </dependency>
        <dependency>
          <groupId>org.springframework.kafka</groupId>
          <artifactId>spring-kafka</artifactId>
          <version>${spring.kafka.version}</version>
        </dependency>

        <dependency>
          <groupId>com.mysql</groupId>
          <artifactId>mysql-connector-j</artifactId>
          <version>${mysql.connector.version}</version>
        </dependency>

        <dependency>
          <groupId>software.amazon.awssdk</groupId>
          <artifactId>s3</artifactId>
          <version>${aws.sdk.version}</version>
        </dependency>
        <dependency>
          <groupId>software.amazon.awssdk</groupId>
          <artifactId>cognitoidentityprovider</artifactId>
          <version>${aws.sdk.version}</version>
        </dependency>

        <dependency>
          <groupId>org.projectlombok</groupId>
          <artifactId>lombok</artifactId>
          <version>${lombok.version}</version>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>jakarta.validation</groupId>
          <artifactId>jakarta.validation-api</artifactId>
          <version>${jakarta.validation.version}</version>
        </dependency>
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>${junit.version}</version>
          <scope>test</scope>
        </dependency>
      </dependencies>

      <build>
        <plugins>
          <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <configuration>
              <excludes>
                <exclude>
                  <groupId>org.projectlombok</groupId>
                  <artifactId>lombok</artifactId>
                </exclude>
              </excludes>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.11.0</version>
            <configuration>
              <source>${java.version}</source>
              <target>${java.version}</target>
              <encoding>UTF-8</encoding>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </project>
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: eshop-payment
  name: eshop-payment-cm0
